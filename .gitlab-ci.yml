image: $SKA_K8S_TOOLS_BUILD_DEPLOY

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MINIKUBE: "false"
  TANGO_HOST: databaseds-tango-base:10000
  CLUSTER_DOMAIN: "cluster.local"
  K8S_TIMEOUT: 800s
  USE_DEV_BUILD: "true"

workflow:
  name: '$CI_PIPELINE_NAME'
  
stages:
  - lint
  - build
  - on_demand_k8s
  - test
  - log-collector
  - scan
  - cleanup

include:
  # Python lint, test
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-lint.gitlab-ci.yml'
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-test.gitlab-ci.yml'

  # Helm Charts
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart-lint.gitlab-ci.yml'
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart-build.gitlab-ci.yml'

  # .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

.k8s_base:
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  tags:
    - k8srunner
    - ska-k8s
  variables:
    HELM_RELEASE: "test-$CI_PIPELINE_ID"
  before_script:
    - export KUBE_NAMESPACE=$(echo "ci-$CI_PROJECT_NAME-$CI_PIPELINE_ID-$GITLAB_USER_LOGIN" | tr '[:upper:]' '[:lower:]')

.k8s_on_demand:
  extends:
    - .k8s_base
  stage: on_demand_k8s
  variables:
    SERVICE_ACCOUNT: "ci-svc-fhs-sys-tests-$CI_PIPELINE_ID"

k8s-on-demand-deploy:
  extends:
    - .k8s_on_demand
  variables:
    K8S_AUTH_NAMESPACES: "$KUBE_NAMESPACE"
    K8S_AUTH_SERVICE_ACCOUNT: "$SERVICE_ACCOUNT"
    CHART_FILE: "charts/ska-mid-cbf-fhs-system-tests/Chart.yaml"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: manual
  script:
    - |
      if [[ $(kubectl get namespaces | grep ci-$CI_PROJECT_NAME) ]]; then
        echo "There is already a ci-$CI_PROJECT_NAME namespace deployed, please delete it before deploying a new one!"
        exit 1
      else
        echo "There is no ci-$CI_PROJECT_NAME namespace deployed, let's do it!"
      fi
    - export K8S_AUTH_NAMESPACES=$KUBE_NAMESPACE
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - echo $KUBE_NAMESPACE
    - make k8s-namespace KUBE_NAMESPACE=$KUBE_NAMESPACE
    - make k8s-namespace-credentials
    - |
      if [ "$K8S_INSTALL_FROM_CAR" != "true" ]; then
       echo "Install charts with name $HELM_RELEASE and path K8S_UMBRELLA_CHART_PATH"
       make k8s-install-chart
      else
        echo "Install charts from CAR"
        make k8s-install-chart-car
      fi
    - echo "Get namespace resources"
    - make k8s-get
    - echo "Wait namespace resources"
    - make k8s-wait
  allow_failure: true
  environment:
    name: k8s/ska-$CI_COMMIT_REF_NAME

k8s-on-demand-info:
  extends:
    - .k8s_on_demand
  rules:
    - when: manual
  script:
    - echo "Get namespace resources"
    - make k8s-get
    - make k8s-info
  allow_failure: true

k8s-on-demand-destroy:
  extends:
    - .k8s_on_demand
  rules:
    - when: manual
  script:
    - make k8s-uninstall-chart
    - make k8s-delete-namespace
  allow_failure: true

python-test:
  extends: .k8s_base
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      needs:
        - job: k8s-on-demand-deploy
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: manual
      needs:
        - job: k8s-on-demand-deploy
    - when: never
  variables:
    PYTEST_MARKER: nightly
  script:
    - export KUBE_NAMESPACE=$(echo "ci-$CI_PROJECT_NAME-$CI_PIPELINE_ID-$GITLAB_USER_LOGIN" | tr '[:upper:]' '[:lower:]')
    - poetry config virtualenvs.create false
    - poetry install
    - mkdir -p build/reports
    - echo "$CI_JOB_ID">>build/reports/ci_job_id.txt
    - echo "$PYTEST_MARKER">>build/reports/pytest_marker.txt
    - make python-test KUBE_NAMESPACE=$KUBE_NAMESPACE PYTEST_MARKER=$PYTEST_MARKER TANGO_HOST=$TANGO_HOST CLUSTER_DOMAIN=$CLUSTER_DOMAIN
  artifacts:
    paths:
      - build/reports/report.json
      - build/reports/ci_job_id.txt
      - build/reports/pytest_marker.txt
      - build/reports/internal_schemas_version.txt
      - build/reports/test-results.html
      - build/reports/test-results.xml
      - build/reports/assets/*
  allow_failure: true

log-collector:
  stage: log-collector
  extends:
    - .k8s_base
  script:
    - apt update
    - apt install -y bsdmainutils
    - apt install -y util-linux
    - mkdir -p logs
    - echo "$CI_JOB_ID">>logs/log_collector_id.txt
    - POD_LIST=$(kubectl get pods -n $KUBE_NAMESPACE --no-headers -o custom-columns=":metadata.name")
    - for pod in ${POD_LIST[@]}; do echo "kubectl logs $pod -n $KUBE_NAMESPACE --since=3h &> logs/${pod}.log" ; kubectl logs $pod -n $KUBE_NAMESPACE --since=3h &> logs/${pod}.log ; done
    - ./log_utils/log_level_summary.sh
  needs:
    - job: python-test
  artifacts:
    paths:
    - logs/*.log
    - logs/log_level_summary.txt
    - logs/log_collector_id.txt
  allow_failure: true


k8s-scheduled-destroy:
  stage: cleanup
  extends:
    - .k8s_base
  needs:
    - python-test
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: delayed
      start_in: 1 hour
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: delayed
      start_in: 10 minutes
  environment:
    name: k8s/ska-$CI_COMMIT_REF_NAME
    action: stop
  script:
    - echo $CI_JOB_NAME - $CI_JOB_STAGE
    - make k8s-uninstall-chart || true
    - |
      if [ "$KEEP_NAMESPACE" != "true" ]; then
        make k8s-delete-namespace
      fi
